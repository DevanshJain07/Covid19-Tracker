{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Cards/Cards.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","url","fetchData","country","a","changeableurl","axios","get","data","confirmed","recovered","deaths","lastUpdate","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","console","log","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","value","options","legend","display","title","text","className","styles","container","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","Cards","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","App","state","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,sBAAsB,KAAO,sB,8JCC/JC,EAAI,iCAGGC,EAAS,uCAAC,WAAMC,GAAN,6BAAAC,EAAA,6DACfC,EAAcJ,EAEfE,IACCE,EAAc,GAAD,OAAIJ,EAAJ,sBAAqBE,IAJnB,kBAO4CG,IAAMC,IAAIF,GAPtD,2BAORG,KAAMC,EAPE,EAOFA,UAAUC,EAPR,EAOQA,UAAUC,EAPlB,EAOkBA,OAAOC,EAPzB,EAOyBA,WAElCC,EAAa,CAACJ,YAAUC,YAAUC,SAAOC,cAThC,kBAURC,GAVQ,2HAAD,sDAgBTC,EAAc,uCAAC,gCAAAV,EAAA,+EAEDE,IAAMC,IAAN,UAAaN,EAAb,WAFC,uBAEbO,EAFa,EAEbA,KAEDK,EAAaL,EAAKO,KAAI,SAACC,GAAD,MAAc,CACtCP,UAAUO,EAAUP,UAAUQ,MAC9BN,OAAOK,EAAUL,OAAOM,MACxBC,KAAKF,EAAUG,eAPC,kBASbN,GATa,wHAAD,qDAedO,EAAc,uCAAC,8BAAAhB,EAAA,+EAEWE,IAAMC,IAAN,UAAaN,EAAb,eAFX,uBAEPoB,EAFO,EAEbb,KAAMa,UAFO,kBAGbA,EAAUN,KAAI,SAACZ,GAAD,OAAWA,EAAQmB,SAHpB,wHAAD,qD,yBCgCZC,EA/DD,SAAC,GAA+C,IAAD,IAA7Cf,KAAMC,EAAuC,EAAvCA,UAAUC,EAA6B,EAA7BA,UAAUC,EAAmB,EAAnBA,OAAQR,EAAW,EAAXA,QAAW,EAC1BqB,mBAAS,IADiB,mBAClDR,EADkD,KACxCS,EADwC,KAGzDC,qBAAU,WACN,IAAMC,EAAQ,uCAAC,sBAAAvB,EAAA,kEACZqB,EADY,SACOX,IADP,6EAAD,qDAGdc,QAAQC,IAAIb,GACZW,MACF,IAEF,IAAMG,EACFd,EAAUe,OAEV,kBAAC,OAAD,CACAvB,KAAM,CACFwB,OAAOhB,EAAUD,KAAI,qBAAEG,QACvBe,SAAS,CAAC,CACNzB,KAAKQ,EAAUD,KAAI,qBAAEN,aACrByB,MAAM,WACNC,YAAY,UACZC,MAAK,GACP,CACE5B,KAAKQ,EAAUD,KAAI,qBAAEJ,UACrBuB,MAAM,SACNC,YAAY,MACZC,MAAK,EACLC,gBAAgB,yBAGpB,KAGFC,EACF7B,EAEI,kBAAC,MAAD,CACAD,KAAM,CACFwB,OAAO,CAAC,WAAW,YAAY,UAC/BC,SAAS,CAAC,CACNC,MAAM,SACNG,gBAAgB,CACZ,0BACA,2BACA,4BAEJ7B,KAAK,CAACC,EAAU8B,MAAM7B,EAAU6B,MAAM5B,EAAO4B,UAGrDC,QAAS,CACLC,OAAO,CAACC,SAAQ,GAChBC,MAAM,CAACD,SAAQ,EAAKE,KAAK,oBAAD,OAAqBzC,OAGnD,KAGN,OACI,yBAAK0C,UAAWC,IAAOC,WAClB5C,EAAQmC,EAASR,I,mCCvCfkB,EAlBO,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,oBAAuB,EACEzB,mBAAS,IADX,mBACpC0B,EADoC,KACnBC,EADmB,KAS3C,OANAzB,qBAAU,YACQ,uCAAC,sBAAAtB,EAAA,kEACX+C,EADW,SACe/B,IADf,6EAAD,qDAGdO,KACF,CAACwB,IAEC,kBAACC,EAAA,EAAD,CAAaP,UAAWC,IAAOM,aAC3B,kBAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAKP,EAAoBO,EAAEC,OAAOlB,SACtE,4BAAQA,MAAM,IAAd,UACCW,EAAiBnC,KAAI,SAACZ,EAAQuD,GAAT,OAAa,4BAAQC,IAAKD,EAAGnB,MAAOpC,GAAUA,S,uFC0CrEyD,EAxDD,SAAC,GAAkD,IAAD,IAAhDpD,KAAMC,EAA0C,EAA1CA,UAAUC,EAAgC,EAAhCA,UAAUC,EAAsB,EAAtBA,OAAOC,EAAe,EAAfA,WAC7C,OAAIH,EAIA,yBAAKoC,UAAWC,IAAOC,WACnB,kBAACc,EAAA,EAAD,CAAMd,WAAS,EAACe,QAAS,EAAGC,QAAQ,UAChC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGvB,UAAWwB,IAAGvB,IAAOwB,KAAKxB,IAAOyB,WACxE,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACAC,MAAO,EACPC,IAAKrE,EAAU8B,MACfwC,SAAU,EACVC,UAAU,OAGd,kBAACP,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIO,KAAKrE,GAAYsE,gBACxD,kBAACT,EAAA,EAAD,CAAYG,QAAQ,SAApB,uCAGJ,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGvB,UAAWwB,IAAGvB,IAAOwB,KAAKxB,IAAOpC,YAC5E,kBAAC8D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MACpB,kBAAC,IAAD,CACIC,MAAO,EACPC,IAAKpE,EAAU6B,MACfwC,SAAU,IACVC,UAAU,OAGd,kBAACP,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIO,KAAKrE,GAAYsE,gBACxD,kBAACT,EAAA,EAAD,CAAYG,QAAQ,SAApB,qCAGJ,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGvB,UAAWwB,IAAGvB,IAAOwB,KAAKxB,IAAOnC,SAC5E,kBAAC6D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MACpB,kBAAC,IAAD,CACIC,MAAO,EACPC,IAAKnE,EAAO4B,MACZwC,SAAU,IACVC,UAAU,OAGd,kBAACP,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIO,KAAKrE,GAAYsE,gBACxD,kBAACT,EAAA,EAAD,CAAYG,QAAQ,SAApB,0CA/CL,c,iBC4BAO,E,4MA7BXC,MAAM,CACF5E,KAAK,GACLL,QAAQ,I,EAUZ8C,oB,uCAAoB,WAAM9C,GAAN,eAAAC,EAAA,sEACCF,EAAUC,GADX,OACVK,EADU,OAEhB,EAAK6E,SAAS,CAAC7E,OAAKL,QAAQA,IAFZ,2C,wPALCD,I,OAAXM,E,OAEN8E,KAAKD,SAAS,CAAC7E,S,qIAQV,IAAD,EACiB8E,KAAKF,MAAnB5E,EADH,EACGA,KAAKL,EADR,EACQA,QACZ,OACI,yBAAK0C,UAAWC,IAAOC,WACnB,kBAAC,EAAD,CAAOvC,KAAMA,IACb,kBAAC,EAAD,CAAeyC,oBAAqBqC,KAAKrC,sBACzC,kBAAC,EAAD,CAAOzC,KAAMA,EAAML,QAASA,S,GAzB1BoF,IAAMC,WCAxBC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,U,mBCJ/C7F,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC,mBCAhCD,EAAOC,QAAU,CAAC,UAAY,yB","file":"static/js/main.6091cd15.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3GHU7\",\"infected\":\"Cards_infected__1tZih\",\"recovered\":\"Cards_recovered__-mnE0\",\"deaths\":\"Cards_deaths__1810W\",\"card\":\"Cards_card__1BhXs\"};","import axios from 'axios'\r\n\r\nconst url='https://covid19.mathdro.id/api'\r\n\r\n\r\nexport const fetchData=async(country)=>{\r\n    let changeableurl=url\r\n    \r\n    if(country){\r\n        changeableurl=`${url}/countries/${country}`\r\n    }\r\n    try{\r\n        const {data:{confirmed,recovered,deaths,lastUpdate}}=await axios.get(changeableurl)\r\n\r\n        const modifiedData={confirmed,recovered,deaths,lastUpdate}\r\n        return modifiedData\r\n    }catch(error){\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const fetchDailyData=async()=>{\r\n    try{\r\n        const {data}=await axios.get(`${url}/daily`)\r\n\r\n        const modifiedData=data.map((dailyData)=>({\r\n            confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date:dailyData.reportDate\r\n        }))\r\n        return modifiedData\r\n    }catch(err){\r\n        return err\r\n    }\r\n}\r\n\r\nexport const fetchCountries=async()=>{\r\n    try{\r\n        const {data:{countries}}=await axios.get(`${url}/countries`)\r\n        return countries.map((country)=>country.name)\r\n    }catch(error){\r\n        return error\r\n    }\r\n}","import React,{useState,useEffect} from 'react'\r\nimport {fetchDailyData} from '../../api'\r\nimport {Line,Bar} from 'react-chartjs-2'\r\nimport styles from './Chart.module.css'\r\n\r\nconst Chart = ({data:{confirmed,recovered,deaths},country})=>{\r\n    const [dailyData,setDailyData]=useState([])\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI=async()=>{\r\n           setDailyData(await fetchDailyData()) \r\n        }\r\n        console.log(dailyData)\r\n        fetchAPI()\r\n    },[])\r\n\r\n    const lineChart=(\r\n        dailyData.length\r\n        ?(\r\n        <Line\r\n        data={{\r\n            labels:dailyData.map(({date})=>date),\r\n            datasets:[{\r\n                data:dailyData.map(({confirmed})=>confirmed),\r\n                label:'Infected',\r\n                borderColor:'#3333ff',\r\n                fill:true\r\n            },{\r\n                data:dailyData.map(({deaths})=>deaths),\r\n                label:'Deaths',\r\n                borderColor:'red',\r\n                fill:true,\r\n                backgroundColor:'rgba(255,0,0,0.5)'\r\n            }]\r\n        }}\r\n        />):null\r\n    )\r\n\r\n    const barChart=(\r\n        confirmed\r\n        ?(\r\n            <Bar\r\n            data={{\r\n                labels:['Infected','Recovered','Deaths'],\r\n                datasets:[{\r\n                    label:'People',\r\n                    backgroundColor:[\r\n                        'rgba(109, 11, 101, 0.5)',\r\n                        'rgba(1, 255, 213, 0.767)',\r\n                        'rgba(189, 34, 34, 0.815)'\r\n                    ],\r\n                    data:[confirmed.value,recovered.value,deaths.value]\r\n                }]\r\n            }}\r\n            options={{\r\n                legend:{display:false},\r\n                title:{display:true,text:`Current state in ${country}`}\r\n            }}\r\n            />\r\n        ):null\r\n    )\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            {country?barChart:lineChart}\r\n        </div>\r\n    )\r\n}\r\nexport default Chart","import React from 'react'\r\nimport {NativeSelect,FormControl} from '@material-ui/core'\r\nimport styles from './CountryPicker.module.css'\r\nimport {fetchCountries} from '../../api'\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react'\r\n\r\nconst CountryPicker = ({handleCountryChange})=>{\r\n    const [fetchedCountries,setFetchedCountries]=useState([])\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI=async()=>{\r\n            setFetchedCountries(await fetchCountries())\r\n        }\r\n        fetchAPI()\r\n    },[setFetchedCountries])\r\n    return(\r\n        <FormControl className={styles.FormControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker","import React from 'react'\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core'\r\nimport styles from './Cards.module.css'\r\nimport Countup from 'react-countup'\r\nimport cx from 'classnames'\r\n\r\nconst Cards = ({data:{confirmed,recovered,deaths,lastUpdate}})=>{\r\n    if(!confirmed){\r\n        return 'Loading...';\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                    <Typography variant=\"h5\">\r\n                        <Countup\r\n                        start={0}\r\n                        end={confirmed.value}\r\n                        duration={3.0}\r\n                        separator=\",\"\r\n                        />\r\n                        </Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number of active cases of COVID19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                    <Typography variant=\"h5\">\r\n                    <Countup\r\n                        start={0}\r\n                        end={recovered.value}\r\n                        duration={3.5}\r\n                        separator=\",\"\r\n                        />\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number of Recoveries of COVID19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                    <Typography variant=\"h5\">\r\n                    <Countup\r\n                        start={0}\r\n                        end={deaths.value}\r\n                        duration={2.5}\r\n                        separator=\",\"\r\n                        />\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number of deaths caused by COVID19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n        )\r\n}\r\nexport default Cards","import React from 'react'\r\nimport {Cards,Chart,CountryPicker} from './components'\r\nimport styles from './App.module.css'\r\nimport {fetchData} from './api'\r\n\r\nclass App extends React.Component{\r\n\r\n    state={\r\n        data:{},\r\n        country:'',\r\n    }\r\n\r\n    async componentDidMount(){\r\n\r\n        const data=await fetchData()\r\n\r\n        this.setState({data})\r\n    }\r\n\r\n    handleCountryChange=async(country)=>{\r\n        const data=await fetchData(country)\r\n        this.setState({data,country:country})\r\n    }\r\n\r\n    render(){\r\n        const {data,country}=this.state\r\n        return(\r\n            <div className={styles.container}>\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Chart data={data} country={country}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'))\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__aHzZJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3f4WC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1WZcL\"};"],"sourceRoot":""}